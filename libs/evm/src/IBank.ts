/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CoinStruct = { denom: string; amount: BigNumberish };

export type CoinStructOutput = [denom: string, amount: bigint] & {
  denom: string;
  amount: bigint;
};

export interface IBankInterface extends Interface {
  getFunction(
    nameOrSignature: "balance" | "send" | "supplyOf"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Send"): EventFragment;

  encodeFunctionData(
    functionFragment: "balance",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AddressLike, AddressLike, CoinStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "supplyOf", values: [string]): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyOf", data: BytesLike): Result;
}

export namespace SendEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: CoinStruct[]
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: CoinStructOutput[]
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: CoinStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBank extends BaseContract {
  connect(runner?: ContractRunner | null): IBank;
  waitForDeployment(): Promise<this>;

  interface: IBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balance: TypedContractMethod<
    [addr: AddressLike, denom: string],
    [bigint],
    "view"
  >;

  send: TypedContractMethod<
    [fromAddress: AddressLike, toAddress: AddressLike, amount: CoinStruct[]],
    [boolean],
    "nonpayable"
  >;

  supplyOf: TypedContractMethod<[denom: string], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[addr: AddressLike, denom: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [fromAddress: AddressLike, toAddress: AddressLike, amount: CoinStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyOf"
  ): TypedContractMethod<[denom: string], [bigint], "view">;

  getEvent(
    key: "Send"
  ): TypedContractEvent<
    SendEvent.InputTuple,
    SendEvent.OutputTuple,
    SendEvent.OutputObject
  >;

  filters: {
    "Send(address,address,tuple[])": TypedContractEvent<
      SendEvent.InputTuple,
      SendEvent.OutputTuple,
      SendEvent.OutputObject
    >;
    Send: TypedContractEvent<
      SendEvent.InputTuple,
      SendEvent.OutputTuple,
      SendEvent.OutputObject
    >;
  };
}
