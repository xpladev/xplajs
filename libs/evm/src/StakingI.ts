/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type DescriptionStruct = {
  moniker: string;
  identity: string;
  website: string;
  securityContact: string;
  details: string;
};

export type DescriptionStructOutput = [
  moniker: string,
  identity: string,
  website: string,
  securityContact: string,
  details: string
] & {
  moniker: string;
  identity: string;
  website: string;
  securityContact: string;
  details: string;
};

export type CommissionRatesStruct = {
  rate: BigNumberish;
  maxRate: BigNumberish;
  maxChangeRate: BigNumberish;
};

export type CommissionRatesStructOutput = [
  rate: bigint,
  maxRate: bigint,
  maxChangeRate: bigint
] & { rate: bigint; maxRate: bigint; maxChangeRate: bigint };

export type CoinStruct = { denom: string; amount: BigNumberish };

export type CoinStructOutput = [denom: string, amount: bigint] & {
  denom: string;
  amount: bigint;
};

export type RedelegationEntryStruct = {
  creationHeight: BigNumberish;
  completionTime: BigNumberish;
  initialBalance: BigNumberish;
  sharesDst: BigNumberish;
};

export type RedelegationEntryStructOutput = [
  creationHeight: bigint,
  completionTime: bigint,
  initialBalance: bigint,
  sharesDst: bigint
] & {
  creationHeight: bigint;
  completionTime: bigint;
  initialBalance: bigint;
  sharesDst: bigint;
};

export type RedelegationOutputStruct = {
  delegatorAddress: string;
  validatorSrcAddress: string;
  validatorDstAddress: string;
  entries: RedelegationEntryStruct[];
};

export type RedelegationOutputStructOutput = [
  delegatorAddress: string,
  validatorSrcAddress: string,
  validatorDstAddress: string,
  entries: RedelegationEntryStructOutput[]
] & {
  delegatorAddress: string;
  validatorSrcAddress: string;
  validatorDstAddress: string;
  entries: RedelegationEntryStructOutput[];
};

export type PageRequestStruct = {
  key: BytesLike;
  offset: BigNumberish;
  limit: BigNumberish;
  countTotal: boolean;
  reverse: boolean;
};

export type PageRequestStructOutput = [
  key: string,
  offset: bigint,
  limit: bigint,
  countTotal: boolean,
  reverse: boolean
] & {
  key: string;
  offset: bigint;
  limit: bigint;
  countTotal: boolean;
  reverse: boolean;
};

export type RedelegationStruct = {
  delegatorAddress: string;
  validatorSrcAddress: string;
  validatorDstAddress: string;
  entries: RedelegationEntryStruct[];
};

export type RedelegationStructOutput = [
  delegatorAddress: string,
  validatorSrcAddress: string,
  validatorDstAddress: string,
  entries: RedelegationEntryStructOutput[]
] & {
  delegatorAddress: string;
  validatorSrcAddress: string;
  validatorDstAddress: string;
  entries: RedelegationEntryStructOutput[];
};

export type RedelegationEntryResponseStruct = {
  redelegationEntry: RedelegationEntryStruct;
  balance: BigNumberish;
};

export type RedelegationEntryResponseStructOutput = [
  redelegationEntry: RedelegationEntryStructOutput,
  balance: bigint
] & { redelegationEntry: RedelegationEntryStructOutput; balance: bigint };

export type RedelegationResponseStruct = {
  redelegation: RedelegationStruct;
  entries: RedelegationEntryResponseStruct[];
};

export type RedelegationResponseStructOutput = [
  redelegation: RedelegationStructOutput,
  entries: RedelegationEntryResponseStructOutput[]
] & {
  redelegation: RedelegationStructOutput;
  entries: RedelegationEntryResponseStructOutput[];
};

export type PageResponseStruct = { nextKey: BytesLike; total: BigNumberish };

export type PageResponseStructOutput = [nextKey: string, total: bigint] & {
  nextKey: string;
  total: bigint;
};

export type UnbondingDelegationEntryStruct = {
  creationHeight: BigNumberish;
  completionTime: BigNumberish;
  initialBalance: BigNumberish;
  balance: BigNumberish;
  unbondingId: BigNumberish;
  unbondingOnHoldRefCount: BigNumberish;
};

export type UnbondingDelegationEntryStructOutput = [
  creationHeight: bigint,
  completionTime: bigint,
  initialBalance: bigint,
  balance: bigint,
  unbondingId: bigint,
  unbondingOnHoldRefCount: bigint
] & {
  creationHeight: bigint;
  completionTime: bigint;
  initialBalance: bigint;
  balance: bigint;
  unbondingId: bigint;
  unbondingOnHoldRefCount: bigint;
};

export type UnbondingDelegationOutputStruct = {
  delegatorAddress: string;
  validatorAddress: string;
  entries: UnbondingDelegationEntryStruct[];
};

export type UnbondingDelegationOutputStructOutput = [
  delegatorAddress: string,
  validatorAddress: string,
  entries: UnbondingDelegationEntryStructOutput[]
] & {
  delegatorAddress: string;
  validatorAddress: string;
  entries: UnbondingDelegationEntryStructOutput[];
};

export type ValidatorStruct = {
  operatorAddress: string;
  consensusPubkey: string;
  jailed: boolean;
  status: BigNumberish;
  tokens: BigNumberish;
  delegatorShares: BigNumberish;
  description: string;
  unbondingHeight: BigNumberish;
  unbondingTime: BigNumberish;
  commission: BigNumberish;
  minSelfDelegation: BigNumberish;
};

export type ValidatorStructOutput = [
  operatorAddress: string,
  consensusPubkey: string,
  jailed: boolean,
  status: bigint,
  tokens: bigint,
  delegatorShares: bigint,
  description: string,
  unbondingHeight: bigint,
  unbondingTime: bigint,
  commission: bigint,
  minSelfDelegation: bigint
] & {
  operatorAddress: string;
  consensusPubkey: string;
  jailed: boolean;
  status: bigint;
  tokens: bigint;
  delegatorShares: bigint;
  description: string;
  unbondingHeight: bigint;
  unbondingTime: bigint;
  commission: bigint;
  minSelfDelegation: bigint;
};

export interface StakingIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelUnbondingDelegation"
      | "createValidator"
      | "delegate"
      | "delegation"
      | "editValidator"
      | "redelegate"
      | "redelegation"
      | "redelegations"
      | "unbondingDelegation"
      | "undelegate"
      | "validator"
      | "validators"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelUnbondingDelegation"
      | "CreateValidator"
      | "Delegate"
      | "EditValidator"
      | "Redelegate"
      | "Unbond"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelUnbondingDelegation",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createValidator",
    values: [
      DescriptionStruct,
      CommissionRatesStruct,
      BigNumberish,
      AddressLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegation",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "editValidator",
    values: [DescriptionStruct, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegate",
    values: [AddressLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegation",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegations",
    values: [AddressLike, string, string, PageRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondingDelegation",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [string, PageRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelUnbondingDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondingDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
}

export namespace CancelUnbondingDelegationEvent {
  export type InputTuple = [
    delegatorAddress: AddressLike,
    validatorAddress: AddressLike,
    amount: BigNumberish,
    creationHeight: BigNumberish
  ];
  export type OutputTuple = [
    delegatorAddress: string,
    validatorAddress: string,
    amount: bigint,
    creationHeight: bigint
  ];
  export interface OutputObject {
    delegatorAddress: string;
    validatorAddress: string;
    amount: bigint;
    creationHeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateValidatorEvent {
  export type InputTuple = [validatorAddress: AddressLike, value: BigNumberish];
  export type OutputTuple = [validatorAddress: string, value: bigint];
  export interface OutputObject {
    validatorAddress: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateEvent {
  export type InputTuple = [
    delegatorAddress: AddressLike,
    validatorAddress: AddressLike,
    amount: BigNumberish,
    newShares: BigNumberish
  ];
  export type OutputTuple = [
    delegatorAddress: string,
    validatorAddress: string,
    amount: bigint,
    newShares: bigint
  ];
  export interface OutputObject {
    delegatorAddress: string;
    validatorAddress: string;
    amount: bigint;
    newShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditValidatorEvent {
  export type InputTuple = [
    validatorAddress: AddressLike,
    commissionRate: BigNumberish,
    minSelfDelegation: BigNumberish
  ];
  export type OutputTuple = [
    validatorAddress: string,
    commissionRate: bigint,
    minSelfDelegation: bigint
  ];
  export interface OutputObject {
    validatorAddress: string;
    commissionRate: bigint;
    minSelfDelegation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedelegateEvent {
  export type InputTuple = [
    delegatorAddress: AddressLike,
    validatorSrcAddress: AddressLike,
    validatorDstAddress: AddressLike,
    amount: BigNumberish,
    completionTime: BigNumberish
  ];
  export type OutputTuple = [
    delegatorAddress: string,
    validatorSrcAddress: string,
    validatorDstAddress: string,
    amount: bigint,
    completionTime: bigint
  ];
  export interface OutputObject {
    delegatorAddress: string;
    validatorSrcAddress: string;
    validatorDstAddress: string;
    amount: bigint;
    completionTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnbondEvent {
  export type InputTuple = [
    delegatorAddress: AddressLike,
    validatorAddress: AddressLike,
    amount: BigNumberish,
    completionTime: BigNumberish
  ];
  export type OutputTuple = [
    delegatorAddress: string,
    validatorAddress: string,
    amount: bigint,
    completionTime: bigint
  ];
  export interface OutputObject {
    delegatorAddress: string;
    validatorAddress: string;
    amount: bigint;
    completionTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakingI extends BaseContract {
  connect(runner?: ContractRunner | null): StakingI;
  waitForDeployment(): Promise<this>;

  interface: StakingIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelUnbondingDelegation: TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      validatorAddress: string,
      amount: BigNumberish,
      creationHeight: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  createValidator: TypedContractMethod<
    [
      description: DescriptionStruct,
      commissionRates: CommissionRatesStruct,
      minSelfDelegation: BigNumberish,
      validatorAddress: AddressLike,
      pubkey: string,
      value: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  delegate: TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      validatorAddress: string,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  delegation: TypedContractMethod<
    [delegatorAddress: AddressLike, validatorAddress: string],
    [
      [bigint, CoinStructOutput] & { shares: bigint; balance: CoinStructOutput }
    ],
    "view"
  >;

  editValidator: TypedContractMethod<
    [
      description: DescriptionStruct,
      validatorAddress: AddressLike,
      commissionRate: BigNumberish,
      minSelfDelegation: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  redelegate: TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      validatorSrcAddress: string,
      validatorDstAddress: string,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  redelegation: TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      srcValidatorAddress: string,
      dstValidatorAddress: string
    ],
    [RedelegationOutputStructOutput],
    "view"
  >;

  redelegations: TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      srcValidatorAddress: string,
      dstValidatorAddress: string,
      pageRequest: PageRequestStruct
    ],
    [
      [RedelegationResponseStructOutput[], PageResponseStructOutput] & {
        response: RedelegationResponseStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  unbondingDelegation: TypedContractMethod<
    [delegatorAddress: AddressLike, validatorAddress: string],
    [UnbondingDelegationOutputStructOutput],
    "view"
  >;

  undelegate: TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      validatorAddress: string,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  validator: TypedContractMethod<
    [validatorAddress: AddressLike],
    [ValidatorStructOutput],
    "view"
  >;

  validators: TypedContractMethod<
    [status: string, pageRequest: PageRequestStruct],
    [
      [ValidatorStructOutput[], PageResponseStructOutput] & {
        validators: ValidatorStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelUnbondingDelegation"
  ): TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      validatorAddress: string,
      amount: BigNumberish,
      creationHeight: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createValidator"
  ): TypedContractMethod<
    [
      description: DescriptionStruct,
      commissionRates: CommissionRatesStruct,
      minSelfDelegation: BigNumberish,
      validatorAddress: AddressLike,
      pubkey: string,
      value: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      validatorAddress: string,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegation"
  ): TypedContractMethod<
    [delegatorAddress: AddressLike, validatorAddress: string],
    [
      [bigint, CoinStructOutput] & { shares: bigint; balance: CoinStructOutput }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "editValidator"
  ): TypedContractMethod<
    [
      description: DescriptionStruct,
      validatorAddress: AddressLike,
      commissionRate: BigNumberish,
      minSelfDelegation: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redelegate"
  ): TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      validatorSrcAddress: string,
      validatorDstAddress: string,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redelegation"
  ): TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      srcValidatorAddress: string,
      dstValidatorAddress: string
    ],
    [RedelegationOutputStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "redelegations"
  ): TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      srcValidatorAddress: string,
      dstValidatorAddress: string,
      pageRequest: PageRequestStruct
    ],
    [
      [RedelegationResponseStructOutput[], PageResponseStructOutput] & {
        response: RedelegationResponseStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unbondingDelegation"
  ): TypedContractMethod<
    [delegatorAddress: AddressLike, validatorAddress: string],
    [UnbondingDelegationOutputStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "undelegate"
  ): TypedContractMethod<
    [
      delegatorAddress: AddressLike,
      validatorAddress: string,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validator"
  ): TypedContractMethod<
    [validatorAddress: AddressLike],
    [ValidatorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<
    [status: string, pageRequest: PageRequestStruct],
    [
      [ValidatorStructOutput[], PageResponseStructOutput] & {
        validators: ValidatorStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CancelUnbondingDelegation"
  ): TypedContractEvent<
    CancelUnbondingDelegationEvent.InputTuple,
    CancelUnbondingDelegationEvent.OutputTuple,
    CancelUnbondingDelegationEvent.OutputObject
  >;
  getEvent(
    key: "CreateValidator"
  ): TypedContractEvent<
    CreateValidatorEvent.InputTuple,
    CreateValidatorEvent.OutputTuple,
    CreateValidatorEvent.OutputObject
  >;
  getEvent(
    key: "Delegate"
  ): TypedContractEvent<
    DelegateEvent.InputTuple,
    DelegateEvent.OutputTuple,
    DelegateEvent.OutputObject
  >;
  getEvent(
    key: "EditValidator"
  ): TypedContractEvent<
    EditValidatorEvent.InputTuple,
    EditValidatorEvent.OutputTuple,
    EditValidatorEvent.OutputObject
  >;
  getEvent(
    key: "Redelegate"
  ): TypedContractEvent<
    RedelegateEvent.InputTuple,
    RedelegateEvent.OutputTuple,
    RedelegateEvent.OutputObject
  >;
  getEvent(
    key: "Unbond"
  ): TypedContractEvent<
    UnbondEvent.InputTuple,
    UnbondEvent.OutputTuple,
    UnbondEvent.OutputObject
  >;

  filters: {
    "CancelUnbondingDelegation(address,address,uint256,uint256)": TypedContractEvent<
      CancelUnbondingDelegationEvent.InputTuple,
      CancelUnbondingDelegationEvent.OutputTuple,
      CancelUnbondingDelegationEvent.OutputObject
    >;
    CancelUnbondingDelegation: TypedContractEvent<
      CancelUnbondingDelegationEvent.InputTuple,
      CancelUnbondingDelegationEvent.OutputTuple,
      CancelUnbondingDelegationEvent.OutputObject
    >;

    "CreateValidator(address,uint256)": TypedContractEvent<
      CreateValidatorEvent.InputTuple,
      CreateValidatorEvent.OutputTuple,
      CreateValidatorEvent.OutputObject
    >;
    CreateValidator: TypedContractEvent<
      CreateValidatorEvent.InputTuple,
      CreateValidatorEvent.OutputTuple,
      CreateValidatorEvent.OutputObject
    >;

    "Delegate(address,address,uint256,uint256)": TypedContractEvent<
      DelegateEvent.InputTuple,
      DelegateEvent.OutputTuple,
      DelegateEvent.OutputObject
    >;
    Delegate: TypedContractEvent<
      DelegateEvent.InputTuple,
      DelegateEvent.OutputTuple,
      DelegateEvent.OutputObject
    >;

    "EditValidator(address,int256,int256)": TypedContractEvent<
      EditValidatorEvent.InputTuple,
      EditValidatorEvent.OutputTuple,
      EditValidatorEvent.OutputObject
    >;
    EditValidator: TypedContractEvent<
      EditValidatorEvent.InputTuple,
      EditValidatorEvent.OutputTuple,
      EditValidatorEvent.OutputObject
    >;

    "Redelegate(address,address,address,uint256,uint256)": TypedContractEvent<
      RedelegateEvent.InputTuple,
      RedelegateEvent.OutputTuple,
      RedelegateEvent.OutputObject
    >;
    Redelegate: TypedContractEvent<
      RedelegateEvent.InputTuple,
      RedelegateEvent.OutputTuple,
      RedelegateEvent.OutputObject
    >;

    "Unbond(address,address,uint256,uint256)": TypedContractEvent<
      UnbondEvent.InputTuple,
      UnbondEvent.OutputTuple,
      UnbondEvent.OutputObject
    >;
    Unbond: TypedContractEvent<
      UnbondEvent.InputTuple,
      UnbondEvent.OutputTuple,
      UnbondEvent.OutputObject
    >;
  };
}
