/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { Bech32I, Bech32IInterface } from "../Bech32I";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "bech32Address",
        type: "string",
      },
    ],
    name: "bech32ToHex",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "string",
        name: "prefix",
        type: "string",
      },
    ],
    name: "hexToBech32",
    outputs: [
      {
        internalType: "string",
        name: "bech32Address",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class Bech32I__factory {
  static readonly abi = _abi;
  static createInterface(): Bech32IInterface {
    return new Interface(_abi) as Bech32IInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Bech32I {
    return new Contract(address, _abi, runner) as unknown as Bech32I;
  }
}
