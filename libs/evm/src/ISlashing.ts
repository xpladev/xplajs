/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type DecStruct = { value: BigNumberish; precision: BigNumberish };

export type DecStructOutput = [value: bigint, precision: bigint] & {
  value: bigint;
  precision: bigint;
};

export type ParamsStruct = {
  signedBlocksWindow: BigNumberish;
  minSignedPerWindow: DecStruct;
  downtimeJailDuration: BigNumberish;
  slashFractionDoubleSign: DecStruct;
  slashFractionDowntime: DecStruct;
};

export type ParamsStructOutput = [
  signedBlocksWindow: bigint,
  minSignedPerWindow: DecStructOutput,
  downtimeJailDuration: bigint,
  slashFractionDoubleSign: DecStructOutput,
  slashFractionDowntime: DecStructOutput
] & {
  signedBlocksWindow: bigint;
  minSignedPerWindow: DecStructOutput;
  downtimeJailDuration: bigint;
  slashFractionDoubleSign: DecStructOutput;
  slashFractionDowntime: DecStructOutput;
};

export type SigningInfoStruct = {
  validatorAddress: AddressLike;
  startHeight: BigNumberish;
  indexOffset: BigNumberish;
  jailedUntil: BigNumberish;
  tombstoned: boolean;
  missedBlocksCounter: BigNumberish;
};

export type SigningInfoStructOutput = [
  validatorAddress: string,
  startHeight: bigint,
  indexOffset: bigint,
  jailedUntil: bigint,
  tombstoned: boolean,
  missedBlocksCounter: bigint
] & {
  validatorAddress: string;
  startHeight: bigint;
  indexOffset: bigint;
  jailedUntil: bigint;
  tombstoned: boolean;
  missedBlocksCounter: bigint;
};

export type PageRequestStruct = {
  key: BytesLike;
  offset: BigNumberish;
  limit: BigNumberish;
  countTotal: boolean;
  reverse: boolean;
};

export type PageRequestStructOutput = [
  key: string,
  offset: bigint,
  limit: bigint,
  countTotal: boolean,
  reverse: boolean
] & {
  key: string;
  offset: bigint;
  limit: bigint;
  countTotal: boolean;
  reverse: boolean;
};

export type PageResponseStruct = { nextKey: BytesLike; total: BigNumberish };

export type PageResponseStructOutput = [nextKey: string, total: bigint] & {
  nextKey: string;
  total: bigint;
};

export interface ISlashingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getParams"
      | "getSigningInfo"
      | "getSigningInfos"
      | "unjail"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ValidatorUnjailed"): EventFragment;

  encodeFunctionData(functionFragment: "getParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSigningInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigningInfos",
    values: [PageRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "unjail", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSigningInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSigningInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unjail", data: BytesLike): Result;
}

export namespace ValidatorUnjailedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISlashing extends BaseContract {
  connect(runner?: ContractRunner | null): ISlashing;
  waitForDeployment(): Promise<this>;

  interface: ISlashingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getParams: TypedContractMethod<[], [ParamsStructOutput], "view">;

  getSigningInfo: TypedContractMethod<
    [consAddress: AddressLike],
    [SigningInfoStructOutput],
    "view"
  >;

  getSigningInfos: TypedContractMethod<
    [pagination: PageRequestStruct],
    [
      [SigningInfoStructOutput[], PageResponseStructOutput] & {
        signingInfos: SigningInfoStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  unjail: TypedContractMethod<
    [validatorAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getParams"
  ): TypedContractMethod<[], [ParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getSigningInfo"
  ): TypedContractMethod<
    [consAddress: AddressLike],
    [SigningInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSigningInfos"
  ): TypedContractMethod<
    [pagination: PageRequestStruct],
    [
      [SigningInfoStructOutput[], PageResponseStructOutput] & {
        signingInfos: SigningInfoStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unjail"
  ): TypedContractMethod<
    [validatorAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "ValidatorUnjailed"
  ): TypedContractEvent<
    ValidatorUnjailedEvent.InputTuple,
    ValidatorUnjailedEvent.OutputTuple,
    ValidatorUnjailedEvent.OutputObject
  >;

  filters: {
    "ValidatorUnjailed(address)": TypedContractEvent<
      ValidatorUnjailedEvent.InputTuple,
      ValidatorUnjailedEvent.OutputTuple,
      ValidatorUnjailedEvent.OutputObject
    >;
    ValidatorUnjailed: TypedContractEvent<
      ValidatorUnjailedEvent.InputTuple,
      ValidatorUnjailedEvent.OutputTuple,
      ValidatorUnjailedEvent.OutputObject
    >;
  };
}
