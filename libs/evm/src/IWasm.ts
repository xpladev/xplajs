/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CoinStruct = { denom: string; amount: BigNumberish };

export type CoinStructOutput = [denom: string, amount: bigint] & {
  denom: string;
  amount: bigint;
};

export interface IWasmInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeContract"
      | "instantiateContract"
      | "instantiateContract2"
      | "migrateContract"
      | "smartContractState"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExecuteContract"
      | "InstantiateContract"
      | "MigrateContract"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeContract",
    values: [AddressLike, AddressLike, BytesLike, CoinStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiateContract",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      BytesLike,
      CoinStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiateContract2",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      BytesLike,
      CoinStruct[],
      BytesLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateContract",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "smartContractState",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiateContract2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smartContractState",
    data: BytesLike
  ): Result;
}

export namespace ExecuteContractEvent {
  export type InputTuple = [
    sender: AddressLike,
    contractAddress: AddressLike,
    msg: BytesLike,
    funds: CoinStruct[],
    data: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    contractAddress: string,
    msg: string,
    funds: CoinStructOutput[],
    data: string
  ];
  export interface OutputObject {
    sender: string;
    contractAddress: string;
    msg: string;
    funds: CoinStructOutput[];
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstantiateContractEvent {
  export type InputTuple = [
    sender: AddressLike,
    contractAddress: AddressLike,
    codeId: BigNumberish,
    admin: AddressLike,
    label: string,
    msg: BytesLike,
    funds: CoinStruct[],
    data: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    contractAddress: string,
    codeId: bigint,
    admin: string,
    label: string,
    msg: string,
    funds: CoinStructOutput[],
    data: string
  ];
  export interface OutputObject {
    sender: string;
    contractAddress: string;
    codeId: bigint;
    admin: string;
    label: string;
    msg: string;
    funds: CoinStructOutput[];
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigrateContractEvent {
  export type InputTuple = [
    sender: AddressLike,
    contractAddress: AddressLike,
    codeId: BigNumberish,
    msg: BytesLike,
    data: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    contractAddress: string,
    codeId: bigint,
    msg: string,
    data: string
  ];
  export interface OutputObject {
    sender: string;
    contractAddress: string;
    codeId: bigint;
    msg: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWasm extends BaseContract {
  connect(runner?: ContractRunner | null): IWasm;
  waitForDeployment(): Promise<this>;

  interface: IWasmInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeContract: TypedContractMethod<
    [
      sender: AddressLike,
      contractAddress: AddressLike,
      msg: BytesLike,
      funds: CoinStruct[]
    ],
    [string],
    "nonpayable"
  >;

  instantiateContract: TypedContractMethod<
    [
      sender: AddressLike,
      admin: AddressLike,
      codeId: BigNumberish,
      label: string,
      msg: BytesLike,
      funds: CoinStruct[]
    ],
    [[string, string] & { contractAddress: string; data: string }],
    "nonpayable"
  >;

  instantiateContract2: TypedContractMethod<
    [
      sender: AddressLike,
      admin: AddressLike,
      codeId: BigNumberish,
      label: string,
      msg: BytesLike,
      funds: CoinStruct[],
      salt: BytesLike,
      fixMsg: boolean
    ],
    [[string, string] & { contractAddress: string; data: string }],
    "nonpayable"
  >;

  migrateContract: TypedContractMethod<
    [
      sender: AddressLike,
      contractAddress: AddressLike,
      codeId: BigNumberish,
      msg: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  smartContractState: TypedContractMethod<
    [contractAddress: AddressLike, queryData: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeContract"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      contractAddress: AddressLike,
      msg: BytesLike,
      funds: CoinStruct[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "instantiateContract"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      admin: AddressLike,
      codeId: BigNumberish,
      label: string,
      msg: BytesLike,
      funds: CoinStruct[]
    ],
    [[string, string] & { contractAddress: string; data: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "instantiateContract2"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      admin: AddressLike,
      codeId: BigNumberish,
      label: string,
      msg: BytesLike,
      funds: CoinStruct[],
      salt: BytesLike,
      fixMsg: boolean
    ],
    [[string, string] & { contractAddress: string; data: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrateContract"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      contractAddress: AddressLike,
      codeId: BigNumberish,
      msg: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "smartContractState"
  ): TypedContractMethod<
    [contractAddress: AddressLike, queryData: BytesLike],
    [string],
    "view"
  >;

  getEvent(
    key: "ExecuteContract"
  ): TypedContractEvent<
    ExecuteContractEvent.InputTuple,
    ExecuteContractEvent.OutputTuple,
    ExecuteContractEvent.OutputObject
  >;
  getEvent(
    key: "InstantiateContract"
  ): TypedContractEvent<
    InstantiateContractEvent.InputTuple,
    InstantiateContractEvent.OutputTuple,
    InstantiateContractEvent.OutputObject
  >;
  getEvent(
    key: "MigrateContract"
  ): TypedContractEvent<
    MigrateContractEvent.InputTuple,
    MigrateContractEvent.OutputTuple,
    MigrateContractEvent.OutputObject
  >;

  filters: {
    "ExecuteContract(address,address,bytes,tuple[],bytes)": TypedContractEvent<
      ExecuteContractEvent.InputTuple,
      ExecuteContractEvent.OutputTuple,
      ExecuteContractEvent.OutputObject
    >;
    ExecuteContract: TypedContractEvent<
      ExecuteContractEvent.InputTuple,
      ExecuteContractEvent.OutputTuple,
      ExecuteContractEvent.OutputObject
    >;

    "InstantiateContract(address,address,uint256,address,string,bytes,tuple[],bytes)": TypedContractEvent<
      InstantiateContractEvent.InputTuple,
      InstantiateContractEvent.OutputTuple,
      InstantiateContractEvent.OutputObject
    >;
    InstantiateContract: TypedContractEvent<
      InstantiateContractEvent.InputTuple,
      InstantiateContractEvent.OutputTuple,
      InstantiateContractEvent.OutputObject
    >;

    "MigrateContract(address,address,uint256,bytes,bytes)": TypedContractEvent<
      MigrateContractEvent.InputTuple,
      MigrateContractEvent.OutputTuple,
      MigrateContractEvent.OutputObject
    >;
    MigrateContract: TypedContractEvent<
      MigrateContractEvent.InputTuple,
      MigrateContractEvent.OutputTuple,
      MigrateContractEvent.OutputObject
    >;
  };
}
