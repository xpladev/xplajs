/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type DecCoinStruct = {
  denom: string;
  amount: BigNumberish;
  precision: BigNumberish;
};

export type DecCoinStructOutput = [
  denom: string,
  amount: bigint,
  precision: bigint
] & { denom: string; amount: bigint; precision: bigint };

export type DelegationDelegatorRewardStruct = {
  validatorAddress: string;
  reward: DecCoinStruct[];
};

export type DelegationDelegatorRewardStructOutput = [
  validatorAddress: string,
  reward: DecCoinStructOutput[]
] & { validatorAddress: string; reward: DecCoinStructOutput[] };

export type CoinStruct = { denom: string; amount: BigNumberish };

export type CoinStructOutput = [denom: string, amount: bigint] & {
  denom: string;
  amount: bigint;
};

export type ValidatorDistributionInfoStruct = {
  operatorAddress: string;
  selfBondRewards: DecCoinStruct[];
  commission: DecCoinStruct[];
};

export type ValidatorDistributionInfoStructOutput = [
  operatorAddress: string,
  selfBondRewards: DecCoinStructOutput[],
  commission: DecCoinStructOutput[]
] & {
  operatorAddress: string;
  selfBondRewards: DecCoinStructOutput[];
  commission: DecCoinStructOutput[];
};

export type PageRequestStruct = {
  key: BytesLike;
  offset: BigNumberish;
  limit: BigNumberish;
  countTotal: boolean;
  reverse: boolean;
};

export type PageRequestStructOutput = [
  key: string,
  offset: bigint,
  limit: bigint,
  countTotal: boolean,
  reverse: boolean
] & {
  key: string;
  offset: bigint;
  limit: bigint;
  countTotal: boolean;
  reverse: boolean;
};

export type DecStruct = { value: BigNumberish; precision: BigNumberish };

export type DecStructOutput = [value: bigint, precision: bigint] & {
  value: bigint;
  precision: bigint;
};

export type ValidatorSlashEventStruct = {
  validatorPeriod: BigNumberish;
  fraction: DecStruct;
};

export type ValidatorSlashEventStructOutput = [
  validatorPeriod: bigint,
  fraction: DecStructOutput
] & { validatorPeriod: bigint; fraction: DecStructOutput };

export type PageResponseStruct = { nextKey: BytesLike; total: BigNumberish };

export type PageResponseStructOutput = [nextKey: string, total: bigint] & {
  nextKey: string;
  total: bigint;
};

export interface DistributionIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRewards"
      | "communityPool"
      | "delegationRewards"
      | "delegationTotalRewards"
      | "delegatorValidators"
      | "delegatorWithdrawAddress"
      | "depositValidatorRewardsPool"
      | "fundCommunityPool"
      | "setWithdrawAddress"
      | "validatorCommission"
      | "validatorDistributionInfo"
      | "validatorOutstandingRewards"
      | "validatorSlashes"
      | "withdrawDelegatorRewards"
      | "withdrawValidatorCommission"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimRewards"
      | "DepositValidatorRewardsPool"
      | "FundCommunityPool"
      | "SetWithdrawerAddress"
      | "WithdrawDelegatorReward"
      | "WithdrawValidatorCommission"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "communityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegationRewards",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationTotalRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorValidators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorWithdrawAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositValidatorRewardsPool",
    values: [AddressLike, string, CoinStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fundCommunityPool",
    values: [AddressLike, CoinStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawAddress",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCommission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorDistributionInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorOutstandingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSlashes",
    values: [string, BigNumberish, BigNumberish, PageRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDelegatorRewards",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawValidatorCommission",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorWithdrawAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositValidatorRewardsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundCommunityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorDistributionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorOutstandingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSlashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelegatorRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawValidatorCommission",
    data: BytesLike
  ): Result;
}

export namespace ClaimRewardsEvent {
  export type InputTuple = [
    delegatorAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [delegatorAddress: string, amount: bigint];
  export interface OutputObject {
    delegatorAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositValidatorRewardsPoolEvent {
  export type InputTuple = [
    depositor: AddressLike,
    validatorAddress: AddressLike,
    denom: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    validatorAddress: string,
    denom: string,
    amount: bigint
  ];
  export interface OutputObject {
    depositor: string;
    validatorAddress: string;
    denom: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundCommunityPoolEvent {
  export type InputTuple = [
    depositor: AddressLike,
    denom: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [depositor: string, denom: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    denom: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWithdrawerAddressEvent {
  export type InputTuple = [caller: AddressLike, withdrawerAddress: string];
  export type OutputTuple = [caller: string, withdrawerAddress: string];
  export interface OutputObject {
    caller: string;
    withdrawerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawDelegatorRewardEvent {
  export type InputTuple = [
    delegatorAddress: AddressLike,
    validatorAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    delegatorAddress: string,
    validatorAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    delegatorAddress: string;
    validatorAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawValidatorCommissionEvent {
  export type InputTuple = [validatorAddress: string, commission: BigNumberish];
  export type OutputTuple = [validatorAddress: string, commission: bigint];
  export interface OutputObject {
    validatorAddress: string;
    commission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DistributionI extends BaseContract {
  connect(runner?: ContractRunner | null): DistributionI;
  waitForDeployment(): Promise<this>;

  interface: DistributionIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRewards: TypedContractMethod<
    [delegatorAddress: AddressLike, maxRetrieve: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  communityPool: TypedContractMethod<[], [DecCoinStructOutput[]], "view">;

  delegationRewards: TypedContractMethod<
    [delegatorAddress: AddressLike, validatorAddress: string],
    [DecCoinStructOutput[]],
    "view"
  >;

  delegationTotalRewards: TypedContractMethod<
    [delegatorAddress: AddressLike],
    [
      [DelegationDelegatorRewardStructOutput[], DecCoinStructOutput[]] & {
        rewards: DelegationDelegatorRewardStructOutput[];
        total: DecCoinStructOutput[];
      }
    ],
    "view"
  >;

  delegatorValidators: TypedContractMethod<
    [delegatorAddress: AddressLike],
    [string[]],
    "view"
  >;

  delegatorWithdrawAddress: TypedContractMethod<
    [delegatorAddress: AddressLike],
    [string],
    "view"
  >;

  depositValidatorRewardsPool: TypedContractMethod<
    [depositor: AddressLike, validatorAddress: string, amount: CoinStruct[]],
    [boolean],
    "nonpayable"
  >;

  fundCommunityPool: TypedContractMethod<
    [depositor: AddressLike, amount: CoinStruct[]],
    [boolean],
    "nonpayable"
  >;

  setWithdrawAddress: TypedContractMethod<
    [delegatorAddress: AddressLike, withdrawerAddress: string],
    [boolean],
    "nonpayable"
  >;

  validatorCommission: TypedContractMethod<
    [validatorAddress: string],
    [DecCoinStructOutput[]],
    "view"
  >;

  validatorDistributionInfo: TypedContractMethod<
    [validatorAddress: string],
    [ValidatorDistributionInfoStructOutput],
    "view"
  >;

  validatorOutstandingRewards: TypedContractMethod<
    [validatorAddress: string],
    [DecCoinStructOutput[]],
    "view"
  >;

  validatorSlashes: TypedContractMethod<
    [
      validatorAddress: string,
      startingHeight: BigNumberish,
      endingHeight: BigNumberish,
      pageRequest: PageRequestStruct
    ],
    [
      [ValidatorSlashEventStructOutput[], PageResponseStructOutput] & {
        slashes: ValidatorSlashEventStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  withdrawDelegatorRewards: TypedContractMethod<
    [delegatorAddress: AddressLike, validatorAddress: string],
    [CoinStructOutput[]],
    "nonpayable"
  >;

  withdrawValidatorCommission: TypedContractMethod<
    [validatorAddress: string],
    [CoinStructOutput[]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [delegatorAddress: AddressLike, maxRetrieve: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "communityPool"
  ): TypedContractMethod<[], [DecCoinStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "delegationRewards"
  ): TypedContractMethod<
    [delegatorAddress: AddressLike, validatorAddress: string],
    [DecCoinStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegationTotalRewards"
  ): TypedContractMethod<
    [delegatorAddress: AddressLike],
    [
      [DelegationDelegatorRewardStructOutput[], DecCoinStructOutput[]] & {
        rewards: DelegationDelegatorRewardStructOutput[];
        total: DecCoinStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegatorValidators"
  ): TypedContractMethod<[delegatorAddress: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "delegatorWithdrawAddress"
  ): TypedContractMethod<[delegatorAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "depositValidatorRewardsPool"
  ): TypedContractMethod<
    [depositor: AddressLike, validatorAddress: string, amount: CoinStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundCommunityPool"
  ): TypedContractMethod<
    [depositor: AddressLike, amount: CoinStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawAddress"
  ): TypedContractMethod<
    [delegatorAddress: AddressLike, withdrawerAddress: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validatorCommission"
  ): TypedContractMethod<
    [validatorAddress: string],
    [DecCoinStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorDistributionInfo"
  ): TypedContractMethod<
    [validatorAddress: string],
    [ValidatorDistributionInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorOutstandingRewards"
  ): TypedContractMethod<
    [validatorAddress: string],
    [DecCoinStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorSlashes"
  ): TypedContractMethod<
    [
      validatorAddress: string,
      startingHeight: BigNumberish,
      endingHeight: BigNumberish,
      pageRequest: PageRequestStruct
    ],
    [
      [ValidatorSlashEventStructOutput[], PageResponseStructOutput] & {
        slashes: ValidatorSlashEventStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawDelegatorRewards"
  ): TypedContractMethod<
    [delegatorAddress: AddressLike, validatorAddress: string],
    [CoinStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawValidatorCommission"
  ): TypedContractMethod<
    [validatorAddress: string],
    [CoinStructOutput[]],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimRewards"
  ): TypedContractEvent<
    ClaimRewardsEvent.InputTuple,
    ClaimRewardsEvent.OutputTuple,
    ClaimRewardsEvent.OutputObject
  >;
  getEvent(
    key: "DepositValidatorRewardsPool"
  ): TypedContractEvent<
    DepositValidatorRewardsPoolEvent.InputTuple,
    DepositValidatorRewardsPoolEvent.OutputTuple,
    DepositValidatorRewardsPoolEvent.OutputObject
  >;
  getEvent(
    key: "FundCommunityPool"
  ): TypedContractEvent<
    FundCommunityPoolEvent.InputTuple,
    FundCommunityPoolEvent.OutputTuple,
    FundCommunityPoolEvent.OutputObject
  >;
  getEvent(
    key: "SetWithdrawerAddress"
  ): TypedContractEvent<
    SetWithdrawerAddressEvent.InputTuple,
    SetWithdrawerAddressEvent.OutputTuple,
    SetWithdrawerAddressEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawDelegatorReward"
  ): TypedContractEvent<
    WithdrawDelegatorRewardEvent.InputTuple,
    WithdrawDelegatorRewardEvent.OutputTuple,
    WithdrawDelegatorRewardEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawValidatorCommission"
  ): TypedContractEvent<
    WithdrawValidatorCommissionEvent.InputTuple,
    WithdrawValidatorCommissionEvent.OutputTuple,
    WithdrawValidatorCommissionEvent.OutputObject
  >;

  filters: {
    "ClaimRewards(address,uint256)": TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;
    ClaimRewards: TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;

    "DepositValidatorRewardsPool(address,address,string,uint256)": TypedContractEvent<
      DepositValidatorRewardsPoolEvent.InputTuple,
      DepositValidatorRewardsPoolEvent.OutputTuple,
      DepositValidatorRewardsPoolEvent.OutputObject
    >;
    DepositValidatorRewardsPool: TypedContractEvent<
      DepositValidatorRewardsPoolEvent.InputTuple,
      DepositValidatorRewardsPoolEvent.OutputTuple,
      DepositValidatorRewardsPoolEvent.OutputObject
    >;

    "FundCommunityPool(address,string,uint256)": TypedContractEvent<
      FundCommunityPoolEvent.InputTuple,
      FundCommunityPoolEvent.OutputTuple,
      FundCommunityPoolEvent.OutputObject
    >;
    FundCommunityPool: TypedContractEvent<
      FundCommunityPoolEvent.InputTuple,
      FundCommunityPoolEvent.OutputTuple,
      FundCommunityPoolEvent.OutputObject
    >;

    "SetWithdrawerAddress(address,string)": TypedContractEvent<
      SetWithdrawerAddressEvent.InputTuple,
      SetWithdrawerAddressEvent.OutputTuple,
      SetWithdrawerAddressEvent.OutputObject
    >;
    SetWithdrawerAddress: TypedContractEvent<
      SetWithdrawerAddressEvent.InputTuple,
      SetWithdrawerAddressEvent.OutputTuple,
      SetWithdrawerAddressEvent.OutputObject
    >;

    "WithdrawDelegatorReward(address,address,uint256)": TypedContractEvent<
      WithdrawDelegatorRewardEvent.InputTuple,
      WithdrawDelegatorRewardEvent.OutputTuple,
      WithdrawDelegatorRewardEvent.OutputObject
    >;
    WithdrawDelegatorReward: TypedContractEvent<
      WithdrawDelegatorRewardEvent.InputTuple,
      WithdrawDelegatorRewardEvent.OutputTuple,
      WithdrawDelegatorRewardEvent.OutputObject
    >;

    "WithdrawValidatorCommission(string,uint256)": TypedContractEvent<
      WithdrawValidatorCommissionEvent.InputTuple,
      WithdrawValidatorCommissionEvent.OutputTuple,
      WithdrawValidatorCommissionEvent.OutputObject
    >;
    WithdrawValidatorCommission: TypedContractEvent<
      WithdrawValidatorCommissionEvent.InputTuple,
      WithdrawValidatorCommissionEvent.OutputTuple,
      WithdrawValidatorCommissionEvent.OutputObject
    >;
  };
}
