/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CoinStruct = { denom: string; amount: BigNumberish };

export type CoinStructOutput = [denom: string, amount: bigint] & {
  denom: string;
  amount: bigint;
};

export type WeightedVoteOptionStruct = { option: BigNumberish; weight: string };

export type WeightedVoteOptionStructOutput = [
  option: bigint,
  weight: string
] & { option: bigint; weight: string };

export type DepositDataStruct = {
  proposalId: BigNumberish;
  depositor: AddressLike;
  amount: CoinStruct[];
};

export type DepositDataStructOutput = [
  proposalId: bigint,
  depositor: string,
  amount: CoinStructOutput[]
] & { proposalId: bigint; depositor: string; amount: CoinStructOutput[] };

export type PageRequestStruct = {
  key: BytesLike;
  offset: BigNumberish;
  limit: BigNumberish;
  countTotal: boolean;
  reverse: boolean;
};

export type PageRequestStructOutput = [
  key: string,
  offset: bigint,
  limit: bigint,
  countTotal: boolean,
  reverse: boolean
] & {
  key: string;
  offset: bigint;
  limit: bigint;
  countTotal: boolean;
  reverse: boolean;
};

export type PageResponseStruct = { nextKey: BytesLike; total: BigNumberish };

export type PageResponseStructOutput = [nextKey: string, total: bigint] & {
  nextKey: string;
  total: bigint;
};

export type ParamsStruct = {
  votingPeriod: BigNumberish;
  minDeposit: CoinStruct[];
  maxDepositPeriod: BigNumberish;
  quorum: string;
  threshold: string;
  vetoThreshold: string;
  minInitialDepositRatio: string;
  proposalCancelRatio: string;
  proposalCancelDest: string;
  expeditedVotingPeriod: BigNumberish;
  expeditedThreshold: string;
  expeditedMinDeposit: CoinStruct[];
  burnVoteQuorum: boolean;
  burnProposalDepositPrevote: boolean;
  burnVoteVeto: boolean;
  minDepositRatio: string;
};

export type ParamsStructOutput = [
  votingPeriod: bigint,
  minDeposit: CoinStructOutput[],
  maxDepositPeriod: bigint,
  quorum: string,
  threshold: string,
  vetoThreshold: string,
  minInitialDepositRatio: string,
  proposalCancelRatio: string,
  proposalCancelDest: string,
  expeditedVotingPeriod: bigint,
  expeditedThreshold: string,
  expeditedMinDeposit: CoinStructOutput[],
  burnVoteQuorum: boolean,
  burnProposalDepositPrevote: boolean,
  burnVoteVeto: boolean,
  minDepositRatio: string
] & {
  votingPeriod: bigint;
  minDeposit: CoinStructOutput[];
  maxDepositPeriod: bigint;
  quorum: string;
  threshold: string;
  vetoThreshold: string;
  minInitialDepositRatio: string;
  proposalCancelRatio: string;
  proposalCancelDest: string;
  expeditedVotingPeriod: bigint;
  expeditedThreshold: string;
  expeditedMinDeposit: CoinStructOutput[];
  burnVoteQuorum: boolean;
  burnProposalDepositPrevote: boolean;
  burnVoteVeto: boolean;
  minDepositRatio: string;
};

export type TallyResultDataStruct = {
  yes: string;
  abstain: string;
  no: string;
  noWithVeto: string;
};

export type TallyResultDataStructOutput = [
  yes: string,
  abstain: string,
  no: string,
  noWithVeto: string
] & { yes: string; abstain: string; no: string; noWithVeto: string };

export type ProposalDataStruct = {
  id: BigNumberish;
  messages: string[];
  status: BigNumberish;
  finalTallyResult: TallyResultDataStruct;
  submitTime: BigNumberish;
  depositEndTime: BigNumberish;
  totalDeposit: CoinStruct[];
  votingStartTime: BigNumberish;
  votingEndTime: BigNumberish;
  metadata: string;
  title: string;
  summary: string;
  proposer: AddressLike;
};

export type ProposalDataStructOutput = [
  id: bigint,
  messages: string[],
  status: bigint,
  finalTallyResult: TallyResultDataStructOutput,
  submitTime: bigint,
  depositEndTime: bigint,
  totalDeposit: CoinStructOutput[],
  votingStartTime: bigint,
  votingEndTime: bigint,
  metadata: string,
  title: string,
  summary: string,
  proposer: string
] & {
  id: bigint;
  messages: string[];
  status: bigint;
  finalTallyResult: TallyResultDataStructOutput;
  submitTime: bigint;
  depositEndTime: bigint;
  totalDeposit: CoinStructOutput[];
  votingStartTime: bigint;
  votingEndTime: bigint;
  metadata: string;
  title: string;
  summary: string;
  proposer: string;
};

export type WeightedVoteStruct = {
  proposalId: BigNumberish;
  voter: AddressLike;
  options: WeightedVoteOptionStruct[];
  metadata: string;
};

export type WeightedVoteStructOutput = [
  proposalId: bigint,
  voter: string,
  options: WeightedVoteOptionStructOutput[],
  metadata: string
] & {
  proposalId: bigint;
  voter: string;
  options: WeightedVoteOptionStructOutput[];
  metadata: string;
};

export interface IGovInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelProposal"
      | "deposit"
      | "getConstitution"
      | "getDeposit"
      | "getDeposits"
      | "getParams"
      | "getProposal"
      | "getProposals"
      | "getTallyResult"
      | "getVote"
      | "getVotes"
      | "submitProposal"
      | "vote"
      | "voteWeighted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelProposal"
      | "Deposit"
      | "SubmitProposal"
      | "Vote"
      | "VoteWeighted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish, CoinStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getConstitution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposits",
    values: [BigNumberish, PageRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "getParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposals",
    values: [BigNumberish, AddressLike, AddressLike, PageRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTallyResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [BigNumberish, PageRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [AddressLike, BytesLike, CoinStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [AddressLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteWeighted",
    values: [AddressLike, BigNumberish, WeightedVoteOptionStruct[], string]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConstitution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTallyResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteWeighted",
    data: BytesLike
  ): Result;
}

export namespace CancelProposalEvent {
  export type InputTuple = [proposer: AddressLike, proposalId: BigNumberish];
  export type OutputTuple = [proposer: string, proposalId: bigint];
  export interface OutputObject {
    proposer: string;
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    depositor: AddressLike,
    proposalId: BigNumberish,
    amount: CoinStruct[]
  ];
  export type OutputTuple = [
    depositor: string,
    proposalId: bigint,
    amount: CoinStructOutput[]
  ];
  export interface OutputObject {
    depositor: string;
    proposalId: bigint;
    amount: CoinStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitProposalEvent {
  export type InputTuple = [proposer: AddressLike, proposalId: BigNumberish];
  export type OutputTuple = [proposer: string, proposalId: bigint];
  export interface OutputObject {
    proposer: string;
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    option: BigNumberish
  ];
  export type OutputTuple = [voter: string, proposalId: bigint, option: bigint];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    option: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteWeightedEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    options: WeightedVoteOptionStruct[]
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    options: WeightedVoteOptionStructOutput[]
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    options: WeightedVoteOptionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGov extends BaseContract {
  connect(runner?: ContractRunner | null): IGov;
  waitForDeployment(): Promise<this>;

  interface: IGovInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelProposal: TypedContractMethod<
    [proposer: AddressLike, proposalId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [depositor: AddressLike, proposalId: BigNumberish, amount: CoinStruct[]],
    [boolean],
    "nonpayable"
  >;

  getConstitution: TypedContractMethod<[], [string], "view">;

  getDeposit: TypedContractMethod<
    [proposalId: BigNumberish, depositor: AddressLike],
    [DepositDataStructOutput],
    "view"
  >;

  getDeposits: TypedContractMethod<
    [proposalId: BigNumberish, pagination: PageRequestStruct],
    [
      [DepositDataStructOutput[], PageResponseStructOutput] & {
        deposits: DepositDataStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  getParams: TypedContractMethod<[], [ParamsStructOutput], "view">;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [ProposalDataStructOutput],
    "view"
  >;

  getProposals: TypedContractMethod<
    [
      proposalStatus: BigNumberish,
      voter: AddressLike,
      depositor: AddressLike,
      pagination: PageRequestStruct
    ],
    [
      [ProposalDataStructOutput[], PageResponseStructOutput] & {
        proposals: ProposalDataStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  getTallyResult: TypedContractMethod<
    [proposalId: BigNumberish],
    [TallyResultDataStructOutput],
    "view"
  >;

  getVote: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [WeightedVoteStructOutput],
    "view"
  >;

  getVotes: TypedContractMethod<
    [proposalId: BigNumberish, pagination: PageRequestStruct],
    [
      [WeightedVoteStructOutput[], PageResponseStructOutput] & {
        votes: WeightedVoteStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;

  submitProposal: TypedContractMethod<
    [proposer: AddressLike, jsonProposal: BytesLike, deposit: CoinStruct[]],
    [bigint],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [
      voter: AddressLike,
      proposalId: BigNumberish,
      option: BigNumberish,
      metadata: string
    ],
    [boolean],
    "nonpayable"
  >;

  voteWeighted: TypedContractMethod<
    [
      voter: AddressLike,
      proposalId: BigNumberish,
      options: WeightedVoteOptionStruct[],
      metadata: string
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<
    [proposer: AddressLike, proposalId: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [depositor: AddressLike, proposalId: BigNumberish, amount: CoinStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConstitution"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDeposit"
  ): TypedContractMethod<
    [proposalId: BigNumberish, depositor: AddressLike],
    [DepositDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeposits"
  ): TypedContractMethod<
    [proposalId: BigNumberish, pagination: PageRequestStruct],
    [
      [DepositDataStructOutput[], PageResponseStructOutput] & {
        deposits: DepositDataStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParams"
  ): TypedContractMethod<[], [ParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [ProposalDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposals"
  ): TypedContractMethod<
    [
      proposalStatus: BigNumberish,
      voter: AddressLike,
      depositor: AddressLike,
      pagination: PageRequestStruct
    ],
    [
      [ProposalDataStructOutput[], PageResponseStructOutput] & {
        proposals: ProposalDataStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTallyResult"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [TallyResultDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [WeightedVoteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<
    [proposalId: BigNumberish, pagination: PageRequestStruct],
    [
      [WeightedVoteStructOutput[], PageResponseStructOutput] & {
        votes: WeightedVoteStructOutput[];
        pageResponse: PageResponseStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitProposal"
  ): TypedContractMethod<
    [proposer: AddressLike, jsonProposal: BytesLike, deposit: CoinStruct[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [
      voter: AddressLike,
      proposalId: BigNumberish,
      option: BigNumberish,
      metadata: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteWeighted"
  ): TypedContractMethod<
    [
      voter: AddressLike,
      proposalId: BigNumberish,
      options: WeightedVoteOptionStruct[],
      metadata: string
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "CancelProposal"
  ): TypedContractEvent<
    CancelProposalEvent.InputTuple,
    CancelProposalEvent.OutputTuple,
    CancelProposalEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "SubmitProposal"
  ): TypedContractEvent<
    SubmitProposalEvent.InputTuple,
    SubmitProposalEvent.OutputTuple,
    SubmitProposalEvent.OutputObject
  >;
  getEvent(
    key: "Vote"
  ): TypedContractEvent<
    VoteEvent.InputTuple,
    VoteEvent.OutputTuple,
    VoteEvent.OutputObject
  >;
  getEvent(
    key: "VoteWeighted"
  ): TypedContractEvent<
    VoteWeightedEvent.InputTuple,
    VoteWeightedEvent.OutputTuple,
    VoteWeightedEvent.OutputObject
  >;

  filters: {
    "CancelProposal(address,uint64)": TypedContractEvent<
      CancelProposalEvent.InputTuple,
      CancelProposalEvent.OutputTuple,
      CancelProposalEvent.OutputObject
    >;
    CancelProposal: TypedContractEvent<
      CancelProposalEvent.InputTuple,
      CancelProposalEvent.OutputTuple,
      CancelProposalEvent.OutputObject
    >;

    "Deposit(address,uint64,tuple[])": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "SubmitProposal(address,uint64)": TypedContractEvent<
      SubmitProposalEvent.InputTuple,
      SubmitProposalEvent.OutputTuple,
      SubmitProposalEvent.OutputObject
    >;
    SubmitProposal: TypedContractEvent<
      SubmitProposalEvent.InputTuple,
      SubmitProposalEvent.OutputTuple,
      SubmitProposalEvent.OutputObject
    >;

    "Vote(address,uint64,uint8)": TypedContractEvent<
      VoteEvent.InputTuple,
      VoteEvent.OutputTuple,
      VoteEvent.OutputObject
    >;
    Vote: TypedContractEvent<
      VoteEvent.InputTuple,
      VoteEvent.OutputTuple,
      VoteEvent.OutputObject
    >;

    "VoteWeighted(address,uint64,tuple[])": TypedContractEvent<
      VoteWeightedEvent.InputTuple,
      VoteWeightedEvent.OutputTuple,
      VoteWeightedEvent.OutputObject
    >;
    VoteWeighted: TypedContractEvent<
      VoteWeightedEvent.InputTuple,
      VoteWeightedEvent.OutputTuple,
      VoteWeightedEvent.OutputObject
    >;
  };
}
